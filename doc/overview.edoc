@author Bas Wegh
@copyright 2015-2017 SCC/KIT
@version 1.3.0
@title WaTTS the Token Translation Service
@doc
== Introduction ==
WaTTS is an application to 'translate' OpenID Connect (oidc) information into
information specific to a use case. One Example is the translation from oidc to an x509
certificate.

The general architecture of the application is split into two parts, the WaTTS server, which
this documentation is about. The other part is the WaTTS client ui, a Java script single page
application that uses the rest interface of the WaTTS server.

The translation from the OpenID Connect information another service specific representation is
done in two steps:
<ul>
<li> First all possible information about a user are gathered</li>
<li>Second the information is passed to a so called 'plugin'. The plugin does the actual translation. </li>
</ul>
The result of this translation is then presented to the user.

WaTTS is started using the OTP application behaviour, the module implementing it is
{@link watts_app}.
The supervision tree looks as follows. The list is in order of execution, the ordering is
depth first, so 1.2 gets started before 2. List entries without a number are dynamicly
created at run time and none at the loading phase.
<ol>
<li> {@link watts_sup} (supervisor, registered) </li>
<ol>
<li> {@link watts_sessions_sup} (supervisor, registered) </li>
     <ol>
     <li> {@link watts_session_sup} (supervisor, registered, simple_one_for_one) </li>
          <ul>
          <li> {@link watts_session} (worker, dynamic) </li>
          </ul>
     <li> {@link watts_session_mgr} (worker, registered) </li>
     </ol>
<li> {@link watts_rsp_keys_sup} (supervisor, registered, simple_one_for_one) </li>
     <ul>
     <li> {@link watts_rsp_keys} (worker, dynamic) </li>
     </ul>
<li> {@link watts_plugin_sup} (supervisor, registered, simple_one_for_one) </li>
     <ul>
     <li> {@link watts_plugin_runner} (worker, dynamic) </li>
     </ul>
<li> {@link watts_plugin} (worker, registered) </li>
<li> {@link watts_data_sqlite} (worker, registered) </li>
<li> {@link watts_temp_cred_sup} (supervisor, registered, simple_one_for_one) </li>
     <ul>
     <li> {@link watts_temp_cred_data} (worker, dynamic) </li>
     </ul>
<li> {@link watts_temp_cred} (worker, registered) </li>
<li> {@link watts_init} (worker) </li>
</ol>
</ol>


The server is configured after all modules (code) is loaded by the module.
Have a look at {@link watts_init} regarding the initialization phase.


WaTTS uses different other Erlang/OTP application to perform the needed functionality, the important ones are:
<ul>
        <li> <a href="https://github.com/indigo-dc/oidcc">oidcc</a>: Used to keep track of the OpenID Connect provider and validate incomming token.</li>
        <li> <a href="https://github.com/uwiger/jobs">jobs</a>: Used to create queues per service, when needed, not to exceed the limit in paralellism.</li>
        <li> <a href="https://github.com/basho/lager">lager</a>: Used for logging.</li>
        <li> <a href="https://github.com/ninenines/cowboy">cowboy</a>: The internal webserver.</li>
        <li> <a href="https://github.com/basho/eleveldb">eleveldb</a>: The fast leveldb database.</li>
        <li> <a href="https://github.com/mmzeeman/esqlite">esqlite</a>: Sqlite3 database.</li>
        <li> <a href="https://github.com/saleyn/erlexec">erlexec</a>: Used to execute the plugins in a controlled environment.</li>
</ul>
