%% @doc the description of the service, as shown to the user
{mapping, "service.$id.description", "watts.service_list", [
          {datatype, string}
          ]}.

%% @doc the command to execute, the so called 'plugin'
{mapping, "service.$id.cmd", "watts.service_list.a", [
          {datatype, string}
          ]}.

%% @doc the credential limit for this service
{mapping, "service.$id.credential_limit", "watts.service_list.b", [
          {datatype, [{atom, infinite}, integer]}
          ]}.

%% @doc the max count of parallel running plugins for this service
{mapping, "service.$id.parallel_runner", "watts.service_list.c", [
          {datatype, [{atom, infinite}, integer]}
          ]}.

%% @doc wether the plugin is allowed to return the same state
%% more than once
{mapping, "service.$id.allow_same_state", "watts.service_list.d", [
          {datatype, [{atom, true}, {atom, false}]}
          ]}.

%% @doc the time after which the WATTS will stop waiting for a response
%% from the plugin
{mapping, "service.$id.plugin_timeout", "watts.service_list.e", [
          {datatype, [{duration, ms}, {atom, infinity}] }
          ]}.

%% @doc if enabled the plugin will get the access token, use this
%% option with caution! default is 'false'
{mapping, "service.$id.pass_access_token", "watts.service_list.f", [
          {datatype, [{atom, true}, {atom, false}]}
          ]}.

%% @doc the way watts connects to the place where to start the plugin
%% this can be either local or ssh
%% @see service.$id.cmd
{mapping, "service.$id.connection.type", "watts.service_list.g", [
          {datatype, {enum, [local, ssh]}}
          ]}.

%% @doc the username to use for the connection
{mapping, "service.$id.connection.user", "watts.service_list.h", [
          {datatype, string}
          ]}.

%% @doc the password to use for the connection
{mapping, "service.$id.connection.password", "watts.service_list.i", [
          {datatype, string}
          ]}.

%% @doc the host to connect to
{mapping, "service.$id.connection.host", "watts.service_list.j", [
          {datatype, string}
          ]}.

%% @doc the port to connect to
{mapping, "service.$id.connection.port", "watts.service_list.k", [
          {datatype, integer}
          ]}.


%% @doc the sshDir to use when connecting
{mapping, "service.$id.connection.ssh_dir", "watts.service_list.l", [
          {datatype, string}
          ]}.


%% @doc the password for the ssh private key
{mapping, "service.$id.connection.ssh_key_pass", "watts.service_list.m", [
          {datatype, string}
          ]}.

%% @doc the plugin configuration parameter
{mapping, "service.$id.plugin.$key", "watts.service_list.n", [
          {datatype, string}
          ]}.


%% @doc wether to hide the service from unauthorized users, default is false
{mapping, "service.$id.authz.hide", "watts.service_list.w", [
          {datatype, [{atom, true}, {atom, false}]}
          ]}.

%% @doc the tooltip, when unauthorized, shown to the user
{mapping, "service.$id.authz.tooltip", "watts.service_list.x", [
          {datatype, string}
          ]}.

%% @doc the authorization configuration for the service, who is
%% allowed to access the service, if not configured no one can
%% use the service
{mapping, "service.$id.authz.allow.$provider.$oidckey.$operation", "watts.service_list.y", [
          {datatype, string}
          ]}.

%% @doc the authorization configuration for the service, who will be
%% denied to use the service even if in 'allowed'
{mapping, "service.$id.authz.forbid.$provider.$oidckey.$operation", "watts.service_list.z", [
          {datatype, string}
          ]}.


{translation, "watts.service_list",
 fun(Conf) ->
         TypeFilter =
             fun(Type) ->
                     Filter =
                         fun({K, _V}) ->
                                 Tokens = string:tokens(Type, "."),
                                 cuttlefish_variable:is_fuzzy_match(K, Tokens)
                         end,
                     lists:filter(Filter, Conf)
             end,

         IdValueList =
             fun(List, Type) ->
                     case Type of
                         three ->
                             [ {Id, V}  || {[_, Id, _], V} <- List ];
                         four ->
                             [ {Id, V}  || {[_, Id, _, _], V} <- List ];
                         plugin ->
                             [ {Id, K, V} || {[_, Id, _, K], V} <- List];
                         authz ->
                             [ {Id, P, K, O, V} ||
                                 {[_, Id, _, _, P, K, O], V} <- List]
                     end

             end,


         TypeIdValue =
             fun(Key, Type) ->
                     List = TypeFilter(Key),
                     IdValueList(List, Type)
             end,

         Descs = TypeIdValue("service.$id.description", three),
         Cmds = TypeIdValue("service.$id.cmd", three),
         CredLimits = TypeIdValue("service.$id.credential_limit", three),
         Runners = TypeIdValue("service.$id.parallel_runner", three),
         SameStates = TypeIdValue("service.$id.allow_same_state", three),
         Timeouts = TypeIdValue("service.$id.plugin_timeout", three),
         PassAccTokens = TypeIdValue("service.$id.pass_access_token", three),
         ConnTypes = TypeIdValue("service.$id.connection.type", four),
         ConnUsers = TypeIdValue("service.$id.connection.user", four),
         ConnPasswds = TypeIdValue("service.$id.connection.password", four),
         ConnHosts = TypeIdValue("service.$id.connection.host", four),
         ConnPorts = TypeIdValue("service.$id.connection.port", four),
         ConnDirs = TypeIdValue("service.$id.connection.ssh_dir", four),
         ConnKeyPasses = TypeIdValue("service.$id.connection.ssh_key_pass", four),
         PluginConfs = TypeIdValue("service.$id.plugin.$key", plugin),

         AuthzHides = TypeIdValue("service.$id.authz.hide", four),
         AuthzTooltips = TypeIdValue("service.$id.authz.tooltip", four),
         AuthzAllows = TypeIdValue("service.$id.authz.allow.$provider.$oidckey.$operation", authz),
         AuthzForbids = TypeIdValue("service.$id.authz.forbid.$provider.$oidckey.$operation", authz),

         CreateSetting =
             fun({Id, Desc}, Result) ->
                     Cmd = case lists:keyfind(Id, 1, Cmds) of
                               {Id, C} -> C;
                               _ -> undefined
                           end,
                     CredLimit = case lists:keyfind(Id, 1, CredLimits) of
                                     {Id, infinite}
                                            -> infinite;
                                     {Id, Limit}
                                       when is_integer(Limit), Limit >= 0
                                            -> Limit;
                                     {Id, BadLimit}
                                            ->
                                         Msg = io_lib:format("the credential limit '~p' of ~p must be a positive integer or 'infinite'", [BadLimit, Id]),
                                         cuttlefish:invalid(Msg);
                                     _ ->
                                         undefined
                                 end,
                     ParaRunner = case lists:keyfind(Id, 1, Runners) of
                                     {Id, NumRun}
                                       when is_integer(NumRun), NumRun > 0
                                            -> NumRun;
                                     {Id, infinite}
                                            -> infinite;
                                     {Id, BadRun} ->
                                        BadRunnerMsg= io_lib:format("the number of parallel runners (~p) for service ~p is out of range",[BadRun, Id]),
                                          cuttlefish:invalid(BadRunnerMsg);
                                      _ -> 1
                                 end,
                     SameState = case lists:keyfind(Id, 1, SameStates) of
                                     {Id, Allow}
                                            -> Allow;
                                     _ -> false
                                 end,
                     PluginTimeout = case lists:keyfind(Id, 1, Timeouts) of
                                     {Id, Timeout}
                                            -> Timeout;
                                     _ -> infinity
                                 end,
                     PassAccToken = case lists:keyfind(Id, 1, PassAccTokens) of
                                     {Id, PassAccessToken}
                                            -> PassAccessToken;
                                     _ -> false
                                 end,
                     ConnType = case lists:keyfind(Id, 1, ConnTypes) of
                                    {Id, Type} -> Type;
                                    _ -> undefined
                                end,

                     ConnUser = case lists:keyfind(Id, 1, ConnUsers) of
                                    {Id, User} -> User;
                                    _ -> undefined
                                end,
                     ConnPasswd = case lists:keyfind(Id, 1, ConnPasswds) of
                                    {Id, Pass} -> Pass;
                                    _ -> undefined
                                end,
                     ConnHost = case lists:keyfind(Id, 1, ConnHosts) of
                                    {Id, Host} -> Host;
                                    _ -> undefined
                                end,
                     ConnPort = case lists:keyfind(Id, 1, ConnPorts) of
                                    {Id, Port}
                                      when is_integer(Port), Port > 0 , Port < 65536 ->
                                         Port;
                                    {Id, Port} when is_integer(Port) ->
                                        BadPortMsg = io_lib:format("the given port number (~p) for service ~p is out of range",[Port, Id]),
                                        cuttlefish:invalid(BadPortMsg);
                                    _ -> 22
                                end,
                     ConnSshDir = case lists:keyfind(Id, 1, ConnDirs) of
                                    {Id, Dir} -> list_to_binary(Dir);
                                    _ -> undefined
                                end,
                     ConnSshKeyPass = case lists:keyfind(Id, 1, ConnKeyPasses) of
                                    {Id, Passwd} -> Passwd;
                                    _ -> undefined
                                end,
                     AuthzHide = case lists:keyfind(Id, 1, AuthzHides) of
                                    {Id, Hide} -> Hide;
                                    _ -> false
                                end,
                     AuthzTooltip = case lists:keyfind(Id, 1, AuthzTooltips) of
                                    {Id, Tooltip} -> list_to_binary(Tooltip);
                                    _ -> <<"Your authorisation is insufficient for this service. This may be due to missing group membership or due to a too low Level of Assurance (LoA) (Yes, we already support that kind of stuff ;D)">>
                                end,
                     FilterById = fun({A, K, V}, List) ->
                                          case A == Id of
                                              true ->
                                                  Key = list_to_binary(K),
                                                  Val = list_to_binary(V),
                                                  [{Key, Val} | List];
                                              false ->
                                                  List
                                          end
                                  end,
                     PluginConf = maps:from_list(lists:foldl(FilterById, [],
                                                             PluginConfs)),

                     OPERATIONS = [
                                   {"contains", contains},
                                   {"is_member_of", is_member_of},
                                   {"equals", equals},
                                   {"regexp", regexp},
                                   {"any", any}
                                  ],
                     CheckProvider =
                         fun(ProviderId) ->
                                 ProviderKey = ["openid",ProviderId,"client_id"],
                                 IsAny = (ProviderId == "any"),
                                 ProvRes = lists:keyfind(ProviderKey, 1, Conf),
                                 case {IsAny, ProvRes} of
                                     {true, _} ->
                                         any;
                                     {false, {ProviderKey, _}} ->
                                         list_to_binary(ProviderId);
                                     {_, false} ->
                                         BadProvMsg = io_lib:format("Authz Config Error: no configuration for provider '~s' found",[ProviderId]),
                                         cuttlefish:invalid(BadProvMsg),
                                         undefined
                                 end
                         end,


                     MapOperation =
                         fun(Op) ->
                                 case lists:keyfind(Op, 1, OPERATIONS) of
                                     {Op, AtomOP} ->
                                         AtomOP;
                                     _ ->
                                         BadOpMsg = io_lib:format("Authz Config Error: no mapping for operation '~s' found",[Op]),
                                         cuttlefish:invalid(BadOpMsg),
                                         undefined
                                 end
                         end,
                     ConvertAuthValue =
                         fun(Value, Op) ->
                                 case {Op, Value} of
                                     {any, "true"} ->
                                         true;
                                     {any, _} ->
                                         false;
                                     {is_member_of, Csv} ->
                                         binary:split(list_to_binary(Csv),[<<",">>], [global]);
                                     {regexp, RegExp} ->
                                         case re:compile(RegExp) of
                                             {ok, MP} ->
                                                 MP;
                                             {error, Reason} ->
                                                 BadRegExp = io_lib:format("Authz Config Error: compilation of regexp ~p failed: ~p", [RegExp, Reason]),
                                                 cuttlefish:invalid(BadRegExp)
                                         end;
                                     {_, _} ->
                                         list_to_binary(Value)
                                 end
                         end,

                     AuthzFilter = fun({A, P, K, O, V}, List) ->
                                          case A == Id of
                                              true ->
                                                  Prov = CheckProvider(P),
                                                  Key = list_to_binary(K),
                                                  Op = MapOperation(O),
                                                  Val = ConvertAuthValue(V, Op),
                                                  [{Prov, Key, Op, Val} | List];
                                              false ->
                                                  List
                                          end
                                  end,

                     AuthzAllow = lists:foldl(AuthzFilter, [], AuthzAllows),
                     AuthzForbid = lists:foldl(AuthzFilter, [], AuthzForbids),


                     AuthzConf = #{ allow => AuthzAllow,
                                    forbid => AuthzForbid,
                                    hide => AuthzHide,
                                    tooltip => AuthzTooltip
                                  },

                     case (Cmd == undefined) or (CredLimit == undefined) or
                         (ConnType == undefined) or
                         ( (ConnType == ssh) and ( (ConnHost == undefined)
                                                   or ( ConnPort == undefined)
                                                   or ( ConnUser == undefined) )
                         )
                     of
                         true ->
                             MissingParamMsg = io_lib:format("not all mandatory parameter of the service ~p are given",[Id]),
                             cuttlefish:invalid(MissingParamMsg);
                         false ->
                             ok
                     end,
                     Setting = #{ id => list_to_binary(Id),
                                  authz => AuthzConf,
                                  description => list_to_binary(Desc),
                                  cmd => list_to_binary(Cmd),
                                  cred_limit => CredLimit,
                                  allow_same_state => SameState,
                                  plugin_conf_config => PluginConf,
                                  parallel_runner => ParaRunner,
                                  pass_access_token => PassAccToken,
                                  plugin_timeout => PluginTimeout,
                                  connection => #{
                                    type => ConnType,
                                    user => ConnUser,
                                    passwd => ConnPasswd,
                                    host => ConnHost,
                                    port => ConnPort,
                                    ssh_dir => ConnSshDir,
                                    ssh_key_pass => ConnSshKeyPass
                                   }
                                  },
                     [ Setting | Result]
             end,
         lists:foldl(CreateSetting, [], Descs)
    end}.
