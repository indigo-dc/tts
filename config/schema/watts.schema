%% @doc the hostname of watts, use localhost
%% for development
{mapping, "hostname", "watts.hostname", [
          {commented, "localhost"},
          {default, "localhost"}
          ]}.

{translation, "watts.hostname",
 fun(Conf) ->
         SSL = cuttlefish:conf_get("ssl", Conf),
         HostName = cuttlefish:conf_get("hostname", Conf),
         Localhost = (HostName == "localhost"),
         case SSL or Localhost of
             true ->
                 HostName;
             false ->
                 Msg = "only localhost supports non SSL setup",
                 cuttlefish:invalid(Msg)
         end
 end}.

%% @doc The port at which traffic seems to enter
%% WaTTS. This can be different from the port
%% WaTTS actually listens on @see listen_port .
{mapping, "port", "watts.port", [
          {commented, 8080},
          {default, 8080},
          {datatype,  [integer, {atom, default}]}
          ]}.

{translation, "watts.port",
    fun(Conf) ->
        Port = cuttlefish:conf_get("port", Conf),
        Ssl = cuttlefish:conf_get("ssl", Conf),
        case {Port, Ssl} of
             { default, false } -> 80;
             { default, true } -> 443;
             { Prt, _} when is_integer(Prt), Prt >= 1, Prt =< 65535 -> Prt;
             _ -> cuttlefish:invalid("invalid tcp port, the port range is [1, 65535]")
        end
    end}.



%% @doc The port to actually listen on. together with
%% port this can be used to pretend to be listening on
%% e.g. 443, although WaTTS actually listens on 8443
%% the default setting is to have it the same as port
{mapping, "listen_port", "watts.listen_port", [
          {default, port},
          {commented, port},
          {datatype,  [{atom, port}, integer]}
          ]}.

{translation, "watts.listen_port",
    fun(Conf) ->
        Port = cuttlefish:conf_get("port", Conf),
        Listen = cuttlefish:conf_get("listen_port", Conf),
        case { Listen, Port } of
             { port, Prt } -> Prt;
             { Lstn, _} when is_integer(Lstn), Lstn >= 1, Lstn =< 65535 -> Lstn;
             _ -> cuttlefish:invalid("invalid tcp port, the port range is [1, 65535]")
        end
    end}.


%% @doc Enable/Disable SSL support, please
%% enable it before using WaTTS in production
{mapping, "ssl", "watts.ssl", [
          {default, true},
          {datatype, {enum, [true, false]}}
          ]}.

{translation, "watts.ssl",
 fun(Conf) ->
         SSL = cuttlefish:conf_get("ssl", Conf),
         HostName = cuttlefish:conf_get("hostname", Conf),
         Localhost = (HostName == "localhost"),
         case SSL or Localhost of
             true ->
                 SSL;
             false ->
                 Msg = "only localhost supports non SSL setup",
                 cuttlefish:invalid(Msg)
         end
 end}.


%% @doc The CA chain  file to use for ssl
{mapping, "cachain_file", "watts.cachain_file", [
          {commented, "{{platform_etc_dir}}/cachain.cert"},
          {datatype, file}
          ]}.

%% @doc The cert file of the server, for ssl
{mapping, "cert_file", "watts.cert_file", [
          {default, "{{platform_etc_dir}}/watts.crt"},
          {commented, "{{platform_etc_dir}}/watts.crt"},
          {datatype, file}
          ]}.

%% @doc The private key file of the server, for ssl
{mapping, "key_file", "watts.key_file", [
          {default, "{{platform_etc_dir}}/watts.key"},
          {commented, "{{platform_etc_dir}}/watts.key"},
          {datatype, file}
          ]}.


%% @doc The path to the file containing the Diffie-Hellman parameter, for ssl
{mapping, "dh_file", "watts.dh_file", [
          {default, none},
          {commented, "{{platform_etc_dir}}/watts_dh.pem"},
          {datatype, [{atom, none}, file]}
          ]}.


%% @doc The inactive duration of a web-session when using a web browser
{mapping, "session_timeout", "watts.session_timeout", [
          {default, "15m"},
          {commented, "15m"},
          {datatype, {duration, ms}}
          ]}.

%% @doc The maximum duration of a web-session when using a web browser
{mapping, "session_max_duration", "watts.session_max_duration", [
          {default, "30m"},
          {commented, "30m"},
          {datatype, {duration, s}}
          ]}.

%% @doc The path to the sqlite database file
{mapping, "sqlite_file", "watts.sqlite_db", [
          {default, "{{platform_data_dir}}/watts.db"},
          {commented, "{{platform_data_dir}}/watts.db"},
          {datatype, file}
          ]}.

%% @doc set to true to enable redirection
{mapping, "redirection.enable", "watts.redirection_enable", [
          {datatype, {enum, [true, false]}},
          {default, false},
          {commented, false}
          ]}.

%% @doc the port number to listen at for traffic to redirect
{mapping, "redirection.listen_port", "watts.redirection_port", [
          {datatype, integer},
          {default, 8080},
          {commented, 8080}
          ]}.

%% @doc The base path at the server
%% e.g. https://server.my.domain/watts would main_path be 'watts'
{mapping, "main_path", "watts.ep_main", [
          {datatype, string},
          {default, "/"},
          hidden
          ]}.

{translation, "watts.ep_main",
 fun(Conf) ->
         Path = cuttlefish:conf_get("main_path", Conf),
         BinPath = list_to_binary(Path),
         case binary:last(BinPath) of
             $/ -> BinPath;
             _ ->
                 Slash = <<"/">>,
                 << BinPath/binary, Slash/binary>>
         end
 end}.

%% @doc if a service id is not configured by default the user is
%% unable to revoke credentials of that service, by setting this to true
%% all credentials of unconfigured services can be revoked
{mapping, "allow_dropping_credentials", "watts.allow_dropping_credentials", [
          {datatype ,    {enum ,  [true, false]}},
          {commented, false},
          {default, false}
          ]}.

%% @doc the privacy document to be shown
{mapping, "privacy_doc", "watts.privacy_doc", [
          {datatype ,    string},
          {commented, "/path/to/privacy_document.html"}
          ]}.

%% @doc publish documentation at ./docs/ if enabled
{mapping, "enable_docs", "watts.enable_docs", [
          {datatype ,    {enum ,  [true, false]}},
          {commented, true},
          {default, false}
          ]}.

{mapping, "erlang.smp", "vm_args.-smp", [
        {default , enable},
        {datatype ,    {enum ,    [enable , auto , disable]}},
        hidden
        ]}.

{mapping, "erlang.mode", "vm_args.-mode", [
        {default , embedded},
        {datatype ,    {enum ,    [embedded]}},
        hidden
        ]}.

{mapping, "erlang.name", "vm_args.-name", [
        {default , "tts@127.0.0.1"},
        hidden
        ]}.

{mapping, "erlang.cookie", "vm_args.-setcookie", [
        {default , "tts"},
        hidden
        ]}.
