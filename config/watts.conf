# This is the configuration file for WaTTS
# for more information go to the WaTTS page and follow the link
# 'User Documentation'

# the nodename of WaTTS (if unclear leave as is)
nodename = watts@127.0.0.1

# the distributed cookie, an internal Erlang setting (if unclear leave as is)
distributed_cookie = watts

# The hostname of WaTTs, use localhost for development
hostname = localhost

# The port at which traffic seems to enter WaTTS
# use 443 for production systems
# port = 443
port = 8080


# The port at which WaTTS is actually listening
# this is used to run WaTTS as unpriviledged user
# see the documentation
#listen_port = 8443

# Wether SSL should be enabled, please enable for production.
# WaTTS will only bind to other hostnames and listen outside if SSL
# is enabled.
ssl = false

# the SSL settings of WaTTS
# the file containing the chain from the Root CA to the last intermediate CA
#cachain_file = {{platform_etc_dir}}/cachain.cert
# the file containing the certificate of the server itself
#cert_file = {{platform_etc_dir}}/watts.crt
# the private key file for the certificate above
#key_file = {{platform_etc_dir}}/watts.key
# the dh parameter to enhance security
#dh_file = {{platform_etc_dir}}/watts_dh.pem

# redireciont of non SSL connections to the SSL page
#redirection.enable = true
#redirection.listen_port = 8080

# the persistence configuration of WaTTS
# the database type to use
database_type = sqlite
sqlite_file = {{platform_data_dir}}/watts.db


# link at the main page of WaTTs
# enable linking to tbe built in documentation
enable_user_doc = true
enable_code_doc = true

# enable link to the privacy document
#privacy_doc = /path/to/privacy_document.html


# certificate validation settings when communicating with OpenID
# Connect provider
# the cacertfile contains all trusted certificates to verify the
# identity of a provider
oidc.cacertfile = /etc/ssl/certs/ca-certificates.crt
# the depth of the chain is the number of intermediate CAs
oidc.cert_depth = 1


# OpenID Connect Provider settings
# please refer to the documentation on how to configure a provider.
# before configuring this WaTTS instance needs to be registered at the
# provider.

# the following is a working example, configured to only work on localost
# (uncomment the following lines for testing purpose)
#openid.iam.description = INDIGO Datacloud Identity and Access Management (IAM)
#openid.iam.client_id = e70e7190-f19a-44be-8f6c-d64cad3771b9
#openid.iam.client_secret = AN5pY379_Z_1jgiiAzmQFB4lYMsBYJOAQrCoTtf2stPA6dMghW5KAoKob4zCDCg_yKBEHe8zKP2KuiWxV34zWzw
#openid.iam.config_endpoint = https://iam-test.indigo-datacloud.eu/.well-known/openid-configuration
#openid.iam.request_scopes = openid, profile


# Service configuration
# the following is an example of a service using the info plugin
# downloadable at https://github.com/indigo-dc/tts_plugin_info
# the id of the service will be 'info'
#service.info.description = Simple Info Service
# the priority of listing, the lower the number the higher in the list
#service.info.display_prio = 10
# the path to the plugin to use
#service.info.cmd = {{platform_data_dir}}/plugins/info.py
# the number of credentials a user is allowed to have
#service.info.credential_limit = 1
# it is a script locally, not remote via ssh
#service.info.connection.type = local
# how many are allowed to be executed in parallel
#service.info.parallel_runner = infinite
# everyone is allowed to use this service
#service.info.authz.allow.any.sub.any = true